name: test

on:
  push:
    branches: [ master, main ]
  pull_request:
  repository_dispatch:
    types: [ metanorma/metanorma-* ]

jobs:
  test:
    name: Test ruby-${{ matrix.ruby }} on ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        ruby: [ '2.7', '2.6', '2.5', '2.4' ]
        experimental: [ false ]
        include:
          - ruby: '3.0'
            os: macos-latest
            experimental: true
          - ruby: '3.0'
            os: ubuntu-latest
            experimental: true
          - ruby: '3.0'
            os: windows-latest
            experimental: true

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@master

      - name: Install metanorma
        shell: python
        env:
          TRIGGER_REPO: ${{ github.event.client_payload.repo }}
          TRIGGER_REF: ${{ github.event.client_payload.ref }}
        run: |
          import os

          repo = os.environ.get("TRIGGER_REPO")
          branch = os.environ.get("TRIGGER_REF")

          with open("Gemfile", "w") as gemfile:
            lines = [ "# generated Gemfile\n\n", 'source "https://rubygems.org"\n\n' ]
            if repo != "metanorma/metanorma-cli":
              lines.append('gem "metanorma-cli"\n')

            if repo:
              gem_branch = "\n"
              if  branch:
                gem_branch = ', branch: "{}"\n'.format(branch)
              lines.append('gem "{}", github: "{}"{}\n'.format(repo.split("/", 1)[1], repo, gem_branch))

            gemfile.writelines(lines)

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - uses: actions/setup-python@v1
        with:
          python-version: '3.6'
          architecture: 'x64'

      - run: pip install xml2rfc

      - name: Metanorma compile *nix
        if: matrix.os != 'windows-latest'
        run: |
          source doctypes.env
          for template in $DOCTYPES
          do
            bundle exec metanorma new test/$template --type $TYPE --doctype $template --template . --overwrite
            if [ -f test/${template}/document.adoc ]
            then
              bundle exec metanorma compile --no-install-fonts test/${template}/document.adoc
            else
              for docfile in test/${template}/*.adoc
              do
                bundle exec metanorma compile --no-install-fonts $docfile
              done
            fi
          done

      - name: Metanorma compile Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop" <# https://stackoverflow.com/a/16334189/902217 #>
          $docTypes = ConvertFrom-StringData (Get-Content ./doctypes.env -Raw)
          $docTypes.DOCTYPES.Split(" ") | % {
            $t = $_.Trim('"')
            bundle exec metanorma new result\$t --type $($docTypes.TYPE) --doctype $t --template . --overwrite
            $doc = "result\$t\document.adoc"
            if (Test-Path -Path $doc) {
              bundle exec metanorma compile --no-install-fonts $doc
            } else {
              Get-ChildItem ".\result\$t" -Filter *.adoc | % {
                bundle exec metanorma compile --no-install-fonts $_.FullName
              }
            }
          }
