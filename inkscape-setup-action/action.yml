name: 'inkscape-setup-action'
description: 'composite action which installs inkscape for all OSes'
runs:
  using: "composite"
  steps:
    - shell: python
      run: |
        import os
        import sys
        import platform

        win_prefix = "C:\\Program Files\\Inkscape\\bin"

        cmds = {
          "Darwin": [ "HOMEBREW_CASK_OPTS='--no-quarantine' brew install --cask inkscape", "inkscape --version" ],
          "Windows": [
            "choco install --no-progress -y inkscape",
            "echo {}>> {}".format(win_prefix, os.environ["GITHUB_PATH"]),
            "\"{}\\inkscape\" --version".format(win_prefix)
          ],
          "Linux": [
            "sudo add-apt-repository ppa:inkscape.dev/stable",
            "sudo apt update",
            "sudo apt install inkscape",
            "inkscape --version"
          ]
        }.get(platform.system(), [ "echo \"Unsupported platform: {}\"".format(platform.system()), "exit 1" ])

        for cmd in cmds:
          if os.system(cmd) != 0:
            print("Command {} FAILED!".format(cmd))
            sys.exit(1)

    # https://github.com/metanorma/metanorma-cli/issues/309
    - name: Update eps_input.inx to allow noninteractive EPS processing
      shell: python
      run: |
        import os
        import platform
        import xml.etree.ElementTree as ET
        import xml.dom.minidom as minidom

        home_path = os.path.expanduser("~")

        eps_input_paths = {
          "Darwin": ["/Applications/Inkscape.app/Contents/Resources/share/inkscape/extensions/eps_input.inx", "/usr/share/inkscape/extensions/eps_input.inx"],
          "Windows": ["{}\\AppData\\Roaming\\inkscape\\eps_input.inx".format(home_path)],
          "Linux": ["/usr/share/inkscape/extensions/eps_input.inx"]
        }.get(platform.system(), [])

        eps_input_paths.append("~/.config/inkscape/eps_input.inx")

        default_ns = "http://www.inkscape.org/namespace/inkscape/extension"
        ET.register_namespace("", default_ns)

        for inx in eps_input_paths:
          if not os.path.exists(inx):
            print("{} doesn't exists. Skip".format(inx))
            continue

          tree = ET.parse(inx)
          root = tree.getroot()

          print("{} before processing:".format(inx))
          print(minidom.parseString(ET.tostring(root)).toprettyxml(indent="  "))

          orig_param = tree.find("./param[@name='autorotate']", namespaces={"": default_ns})
          if orig_param is not None:
            root.remove(orig_param)
            print("Original autorotate param {} removed".format(orig_param))

          new_param = ET.Element("param",
                                 attrib={"name": "autorotate",
                                         "type": "string", "gui-hidden": "true"})
          new_param.text = "None"
          root.append(new_param)

          tree.write("./test.xml")

          print("{} after processing:".format(inx))
          print(minidom.parseString(ET.tostring(root)).toprettyxml())