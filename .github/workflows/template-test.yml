name: test

on:
  workflow_call:
    inputs:
      event_name:
        description: 'deprecated github.event_name used instead'
        default: 'push'
        required: false
        type: string
    secrets:
      pat_token:
        required: true

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: build-matrix
        run: |
          if cat .github/workflows/matrix.json | jq -e 'has("include")'; then
            cat .github/workflows/matrix.json | \
              jq -c '{"type":[.include[0].type],"doctype":[.include[]? | select(.experimental == false).doctype]}' \
              > matrix.json.tmp && mv matrix.json.tmp .github/workflows/matrix.json
          fi

          cat .github/workflows/matrix.json                                        | \
            jq '. + {"experimental": [false]}'                                     | \
            jq '. + {"ruby": ["3.0", "2.7", "2.6"]}'                               | \
            jq -c '. + {"os": ["macos-latest", "ubuntu-latest", "windows-latest" ]}' \
            > matrix.json.tmp && mv matrix.json.tmp .github/workflows/matrix.json

          echo "::set-output name=matrix::$(cat .github/workflows/matrix.json)"

  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    needs: build-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      - uses: metanorma/metanorma-build-scripts/gh-rubygems-setup-action@main
        with:
          token: ${{ secrets.pat_token }}

      - if: github.event_name == 'repository_dispatch'
        shell: python
        env:
          TRIGGER_REPO: ${{ github.event.client_payload.repo }}
          TRIGGER_REF: ${{ github.event.client_payload.ref }}
        # TODO convert to composite action
        run: |
          import os

          repo = os.environ.get("TRIGGER_REPO")
          ref = os.environ.get("TRIGGER_REF")

          print("triggered by: ", repo, " ref: ", ref)

          with open("Gemfile", "w") as gemfile:
            lines = [ "# generated Gemfile\n\n", 'source "https://rubygems.org"\n', 'source "https://rubygems.pkg.github.com/metanorma"\n\n' ]
            if repo != "metanorma/metanorma-cli":
              lines.append('gem "metanorma-cli"\n')
            else:
              proc = "${{ github.repository }}"[::-1].split('-', 1)[0][::-1]
              lines.append('gem "metanorma-' + proc + '"\n')

            if repo:
              gem_ref = "\n"
              if ref:
                gem_ref = ', ref: "{}"\n'.format(ref)
              lines.append('gem "{}", github: "{}"{}\n'.format(repo.split("/", 1)[1], repo, gem_ref))

            gemfile.writelines(lines)

      - run: cat Gemfile

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - uses: actions/setup-python@v1
        with:
          python-version: '3.7'
          architecture: 'x64'

      - run: pip install xml2rfc

      - uses: actions/cache@v2
        with:
          path: |
            ~/.fontist
            ~/.metanorma/fonts
          key: fontist-${{ runner.os }}
          restore-keys: fontist-${{ runner.os }}

      - name: Metanorma compile *nix
        if: matrix.os != 'windows-latest'
        run: |
          source doctypes.env
          for template in $DOCTYPES
          do
            bundle exec metanorma new test/$template --type $TYPE --doctype $template --template . --overwrite
            if [ -f test/${template}/document.adoc ]
            then
              bundle exec metanorma compile --agree-to-terms test/${template}/document.adoc
            else
              for docfile in test/${template}/*.adoc
              do
                bundle exec metanorma compile ---agree-to-terms $docfile
              done
            fi
          done

      - name: Metanorma compile Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop" <# https://stackoverflow.com/a/16334189/902217 #>
          $docTypes = ConvertFrom-StringData (Get-Content ./doctypes.env -Raw)
          $docTypes.DOCTYPES.Split(" ") | % {
            $t = $_.Trim('"')
            bundle exec metanorma new result\$t --type $($docTypes.TYPE) --doctype $t --template . --overwrite
            $doc = "result\$t\document.adoc"
            if (Test-Path -Path $doc) {
              bundle exec metanorma compile --agree-to-terms $doc
            } else {
              Get-ChildItem ".\result\$t" -Filter *.adoc | % {
                bundle exec metanorma compile --agree-to-terms $_.FullName
              }
            }
          }
