#!/usr/bin/env ruby

require 'optparse'
require 'net/http'
require 'json'
require 'yaml'

options = OpenStruct.new
options.organization = 'metanorma'
options.include_forks = false
options.include_archived = false
options.manifest_file = nil
options.verbose = false

OptionParser.new do |opts|
  opts.banner = "Usage: gh-repo-manifest [options]"

  opts.on("-oORG", "--organization=ORG1,ORG2", "GitHub organization(s)") do |org|
    options.organization = org
  end

  opts.on("-i", "--include-fork", "Include fork repos") do |fork|
    options.include_forks = fork
  end

  opts.on("-i", "--include-archived", "Include archived repos") do |archived|
    options.include_archived = archived
  end

  opts.on("-m", "--report-missing [cimas.yml]", "Report missing repos") do |manifest_file|
    options.manifest_file = manifest_file
  end

  opts.on("-v", "--verbose", "Enable verbose logging") do |verbose|
    options.verbose = verbose
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

manifest = {
  settings: {
    reviewers: nil,
    author: ["CAMOBAP"],
  }.transform_keys(&:to_s),
  repositories: {},
  groups: {},
}.transform_keys(&:to_s)

existing_manifest = if File.exist?(options.manifest_file)
                      YAML.load_file(options.manifest_file)
                    else
                      {
                        "repositories": [],
                        "groups": {
                          "ignore": []
                        }
                      }
                    end

groups_matchers = {
  'processor': /^metanorma-\w*$/,
  'metanorma': /^metanorma-.*$/,
  'relaton': /^relaton-.*$/,
  'model': /^\w+-model[-s]?/,
  'data': /^\w+-data-/,
  'style': /-style$/,
  'snap': /-snap$/,
  'brew': /^homebrew-\w+/,
  'choco': /^chocolatey-\w+/,
  'bibitem': /\wbib$/,
  'templates': /^mn-templates-\w/,
  'samples': /^mn-samples-\w/,
  'setup': /\w-setup$/,
  'site': /(\.com|\.org)$/,
  'converter': /[\w\d]+2[\w\d]+/,
  'infrastructure': /(-ci$|^ci-|-registry$|scripts$)/,
  'python': /-py$/
}

begin
  page = 1
  repos = []

  options.organization.split(',').each do |org|
    page = 1
    loop do 
      uri = URI("https://api.github.com/orgs/#{org}/repos?page=#{page}&per_page=100")
      response = Net::HTTP.get(uri)
      result_set = JSON.parse(response)

      unless result_set.kind_of?(Array)
        warn result_set.to_json
        break
      end

      result_set.each do |repo|
        repo_name = repo['name'].to_s
        next if existing_manifest["repositories"].key?(repo_name)

        if (existing_manifest.dig("groups", "ignore") || []).include?(repo_name)
          warn "Skip #{repo_name} because it's in ignore group" if options.verbose
          next
        elsif repo['fork'] && !options.include_forks
          warn "Skip #{repo_name} because it's a fork repo" if options.verbose
          next
        elsif repo['archived'] && !options.include_archived
          warn "Skip #{repo_name} because this repo is archived" if options.verbose
          next
        elsif repo['size'] == 0
          warn "Skip #{repo_name} because it's empty" if options.verbose
          next
        end

        project = {
          remote: "ssh://git@github.com/#{org}/#{repo_name}",
          branch: repo["default_branch"],
        }.transform_keys(&:to_s)

        groups = [] # ['all', repo_name]
        groups_matchers.each do |group, regexp|
          groups << group if repo_name.match(regexp)
        end

        groups.each do |g|
          if manifest.dig("groups", g)
            manifest.dig("groups", g) << repo_name
          else
            manifest["groups"][g] = [repo_name]
          end
        end
        manifest["repositories"][repo_name] = project
      end

      break if result_set.empty?

      page += 1
    end
  end
rescue Interrupt => e
  warn 'interrupted with Ctrl+C, output may be incomplete'
end

manifest["groups"].transform_keys!(&:to_s)

puts YAML.dump(manifest.transform_keys(&:to_s))
