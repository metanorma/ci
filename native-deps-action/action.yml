name: 'native-deps-action'
description: 'list native shared/dynamic library dependencies for native executable'
inputs:
  filepath:
    description: 'Full path to native executable (can be skipped in favor of libname+directory)'
    required: false
  libname:
    description: 'library name (without extension and version)'
    required: false
  directory:
    description: 'path where to search for library'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - shell: python
      run: |
        import os
        import sys
        import glob
        import platform
        import shutil

        filepath = "${{ inputs.filepath }}"

        if not os.path.exists(filepath):
          libname = "${{ inputs.libname }}"
          directory = "${{ inputs.directory }}"

          print("Platform :", platform.system())

          exts = {
            "Darwin": [ ".dylib", ".bundle" ],
            "Windows": [ ".dll", ".exe" ],
            "Linux": [ ".so", "" ]
          }.get(platform.system(), [ "" ])

          for ext in exts:
            search_pattern = "{}/*{}*{}".format(directory, libname, ext)
            print("Searching for pattern :", search_pattern)
            result = glob.glob(search_pattern)
            print("Result :", result)
            if result:
              filepath = result[0]
              break

        if not os.path.exists(filepath):
          print("Unable to find file for passed input")
          sys.exit(2)

        ldd = {
          "Darwin": "otool -L",
          "Windows": "dumpbin /dependents"
        }.get(platform.system(), "ldd")

        if shutil.which(ldd.split(" ")[0]) is None:
          ldd = "ldd"

        cmd = "{} \"{}\"".format(ldd, filepath)

        print("Testing {} ...".format(filepath))
        sys.stdout.flush()
        if os.system(cmd) != 0:
          print("Command {} FAILED!".format(cmd))
          sys.exit(1)
